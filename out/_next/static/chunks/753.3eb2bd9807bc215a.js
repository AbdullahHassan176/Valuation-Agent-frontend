"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[753],{1753:function(t,e,o){o.d(e,{chatService:function(){return n}});let a={BASE_URL:(()=>{console.log("Environment detection:",{hostname:window.location.hostname,href:window.location.href,isAzure:window.location.hostname.includes("azurestaticapps.net"),isLocalhost:["localhost","127.0.0.1"].includes(window.location.hostname)});let t=["localhost","127.0.0.1"].includes(window.location.hostname),e=t?"http://localhost:8000":"https://valuation-backend-api-cadmfqgxgzawa7fp.canadacentral-01.azurewebsites.net";return console.log("Selected backend URL:",e),console.log("Config file: lib/api-config.ts"),e})(),ENDPOINTS:{CHAT:"/poc/chat",IFRS_ASK:"/poc/ifrs-ask",PARSE_CONTRACT:"/poc/parse-contract",EXPLAIN_RUN:"/poc/explain-run",HEALTH:"/healthz",VALUATION_RUNS:"/api/valuation/runs",CURVES:"/api/valuation/curves",TEST:"/api/test"}};let ChatService=class ChatService{async sendMessage(t){try{let e=await fetch("".concat(this.baseUrl).concat(a.ENDPOINTS.CHAT),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:t})});if(!e.ok)throw Error("HTTP error! status: ".concat(e.status));let o=await e.json();return console.log("Chat service response:",o),console.log("Response length:",o.response?o.response.length:0),console.log("LLM powered:",o.llm_powered),o.response||o.message||"I received your message but could not process it."}catch(t){return console.error("Chat service error:",t),"Sorry, I cannot connect to the backend right now. Please check if the backend is running."}}async getValuationRuns(){try{let t=await fetch("".concat(this.baseUrl).concat(a.ENDPOINTS.VALUATION_RUNS));if(!t.ok)throw Error("HTTP error! status: ".concat(t.status));let e=await t.json();return e||[]}catch(t){return console.error("Failed to fetch valuation runs:",t),[]}}async getCurves(){try{let t=await fetch("".concat(this.baseUrl).concat(a.ENDPOINTS.CURVES));if(!t.ok)throw Error("HTTP error! status: ".concat(t.status));let e=await t.json();return e||[]}catch(t){return console.error("Failed to fetch curves:",t),[]}}async checkHealth(){try{let t=await fetch("".concat(this.baseUrl).concat(a.ENDPOINTS.HEALTH));return t.ok}catch(t){return console.error("Health check failed:",t),!1}}async getBackendStatus(){try{let[t,e,o]=await Promise.all([this.checkHealth(),this.getValuationRuns(),this.getCurves()]);return{healthy:t,runs:e.length,curves:o.length,lastRun:e.length>0?e[0]:void 0}}catch(t){return console.error("Failed to get backend status:",t),{healthy:!1,runs:0,curves:0}}}async createValuationRun(t){try{let e=await fetch("".concat(this.baseUrl).concat(a.ENDPOINTS.VALUATION_RUNS),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw Error("HTTP error! status: ".concat(e.status));let o=await e.json();return o}catch(t){throw console.error("Failed to create valuation run:",t),t}}constructor(){this.baseUrl=a.BASE_URL}};let n=new ChatService}}]);